#指定worker的用户/用户组,如果没有指定组，那么将使用与用户名相同的组，默认情况下会使用nobody用户与nobody组（或者nogroup），使用nobody更安全.或者在编译时指定的--user=USER和--group=GROUP的值。
user  qfpay;
#指定了nginx要开启的worker进程数。每个nginx进程平均消耗10MB-12MB内存，根据经验，一般指定一个进程足够了，如果是多核CPU，建议指定和CPU的数量一样多的进程数即可。一个cpu配置多于一个worker数，对nginx而言没有任何益处。如果nginx处理的是cpu密集型（比较耗费cpu的）的操作，比如gzip,ssl等,建议将此值设置为cpu的逻辑个数.一般来说，拥有几个逻辑CPU，就设置为几个worker_processes 为宜，但是 worker_processes 超过8个就没有多大意义了，原因再上面那段英文里已经提到了。
worker_processes  8;
#把woker进程绑定到指定的CPU,默认不绑定任何CPU,一般一个woker绑定一个CPU,0代表开启,1代表关闭.
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;

events {
	#设定连接处理方式,默认nginx会选择最高效的处理方式,也可以用这种方式来手工指定,epoll 是efficient method used on Linux 2.6+.
    use epoll;
#设定一个woker进程能处理的最大同时连接数,includes all connections (e.g. connections with proxied servers, among others), not only connections with clients.Another consideration is that the actual number of simultaneous connections cannot exceed the current limit on the maximum number of open files, which can be changed by worker_rlimit_nofile.
    worker_connections  65535;
    multi_accept on;
}
#设置单个woker最大打开的文件数,确保这个数值大于woker_connections.
worker_rlimit_nofile 65535;
# 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535

#生产环境下日志最好每个server{}配置独自的日志文件。PID会在安装的时候指定目录。
http {
	#定义文件的MIME类型。
    include       mime.types;
    default_type  application/octet-stream;
	# Update charset_types due to updated mime.types
  charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

    log_format  main  '$remote_addr $remote_user [$time_local] "$request" '
        '$status $request_length $body_bytes_sent/$bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" $connection $request_time $upstream_response_time';

    log_format  qflog  '$time_iso8601 $remote_addr $remote_user $connection "$request" $request_length '
        '$status $body_bytes_sent $bytes_sent '
        '"$http_referer" "$http_x_forwarded_for" "$http_user_agent" $request_time $upstream_response_time';

	#默认的日至文件，只有当虚拟主机中没有配置的时候才起作用，一般都配置到虚拟主机中。
    access_log  logs/access.log  main;
	#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    sendfile        on;
	#tcp_nopush = on 会设置调用tcp_cork方法，这个也是默认的，结果就是数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。
    tcp_nopush      on;
	#结论就是 sendfile on; 开启时，tcp_nopush 和 tcp_nodelay 都是on 是可以的。
	tcp_nodelay on;
	#长链接的超时时间,HTTP1.1默认都是长链接。keep-alive.
    keepalive_timeout  300;
	#开启gzip压缩，
    gzip  on;
	# Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;
	#压缩的最小文件大小，低于这个大小的不被压缩，The length is determined only from the “Content-Length” response header field.建议设置成大于1k的字节数，小于1k可能会越压越大。
	gzip_min_length    1k;
	#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。
	gzip_buffers 4 16k;
	# Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).Nginx做为反向代理的时候启用
    gzip_proxied       any;
	#和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
	gzip_vary on;
	#被压缩的类型，默认值压缩text/html,纯文本的压缩效果明显,图片的压缩效果不明显,一般不压缩.
	gzip_types
    	application/atom+xml
    	application/javascript
    	application/json
    	application/ld+json
    	application/manifest+json
    	application/rdf+xml
    	application/rss+xml
    	application/schema+json
    	application/vnd.geo+json
    	application/vnd.ms-fontobject
    	application/x-font-ttf
    	application/x-javascript
    	application/x-web-app-manifest+json
    	application/xhtml+xml
    	application/xml
    	font/eot
    	font/opentype
    	image/bmp
    	image/svg+xml
    	image/vnd.microsoft.icon
    	image/x-icon
    	text/cache-manifest
    	text/css
    	text/javascript
    	text/plain
    	text/vcard
    	text/vnd.rim.location.xloc
    	text/vtt
    	text/x-component
    	text/x-cross-domain-policy
    	text/xml;
	#不显示nginx版本信息，更安全。
    server_tokens off;
	#设定server_name的长度大小，默认值为32或64，如果虚拟主机中server_name设定好多个，那么就需要设置这一项啦。
    server_names_hash_bucket_size 128;	
	#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE 取得。
	#[root@web001 ~]# getconf PAGESIZE 
	#4096
	#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
	client_header_buffer_size 32k;
	#设定client请求的body最大值，特别是指请求头部的Content-Length，如果请求超过的话，返回413 (Request Entity Too Large）错误，但是浏览器无法处理显示这个错误，所以最好设置好。
    client_max_body_size 20m;
	#定义读取client请求头部的超时时间，如果一个client未在指定时间内传完header，会返回408（Request Time-out）错误给客户端。
    client_header_timeout 60s;
	#解释同上。
    client_body_timeout 60s;
	#设定一个响应client的超时时间，超时设置只在两个连续的写操作，不是整个响应的传送，如果client在此时间内无收到任何东西，连接关闭。
     send_timeout 60s;
	#指定连接到后端FastCGI的超时时间。
    fastcgi_connect_timeout 50s;
	#指定向FastCGI传送请求的超时时间，这个值是已经完成两次握手后向FastCGI传送请求的超时时间。	
    fastcgi_send_timeout 50s;
	#指定接收FastCGI应答的超时时间，这个值是已经完成两次握手后接收FastCGI应答的超时时间。
    fastcgi_read_timeout 50s;

	#虚拟主机配置文件最好放在单独的一个conf.d目录下并且以服务的名称命名,这样方便管理,下面一个实例.
	include /home/test/nginx/conf.d/*.conf;
	
	server {
		#监听端口,监听端口，默认80，小于1024的要以root启动。
        listen 80;
		#域名设定,多个用空格隔开.可以通过正则匹配.
        server_name www.1987.name 1987.name;
		#定义日志位置.
        access_log /home/test/nginx/logs/access.log main;
        error_log /home/test/nginx/logs/error.log;
		#定义默认根目录.
        root /data/www;
		#定义首页索引文件的名称.
        index index.html index.htm index.php;
        #域名重定向,有好多办法,这里只是其中一种,回头做个专题,写个文档.
		rewrite ^(.*) http://www.fengmiapp.com/?from=nowww permanent;
  		#设置这些文件在浏览器本地缓存30天，可以提高下次打开我博客的页面加载速度。
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
                expires 30d;
        }
		#设置样式文件在本地浏览器缓存时间为1点，也是为了提高下一次的访问速度。
        location ~ .*\.(js|css)$ { 
                expires 1d;
        }
       

			}


	#http强制转换成https.
	server{
		listen 80;
		server_name www.test.com;
		#方法一
		return 301 https://$host$request_uri;
		#方法二
		rewrite ^/(.*) https://$host/$1 permanent;
			}



}
		



